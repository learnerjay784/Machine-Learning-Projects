{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPlX1XGcGMBTIIPHUdfaSuY"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# **Innomatics internship assessment test task**\n","\n","**created by : Jay Barode**\n","\n","Task : We've to build a linear regression model for predicting the output based on the given data."],"metadata":{"id":"iDwcNTS9qDSf"}},{"cell_type":"code","execution_count":160,"metadata":{"id":"aKNMtebnp6FI","executionInfo":{"status":"ok","timestamp":1676114006878,"user_tz":-330,"elapsed":481,"user":{"displayName":"Jay Barode","userId":"13781167781472862626"}}},"outputs":[],"source":["#Importing the dependencies\n","import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.model_selection import train_test_split\n","from sklearn.linear_model import LogisticRegression"]},{"cell_type":"code","source":["#Loading the data from csv file to pandas dataframe\n","data = pd.read_csv('/content/dataframe_.csv')"],"metadata":{"id":"hvSXo4lpsMO9","executionInfo":{"status":"ok","timestamp":1676114007972,"user_tz":-330,"elapsed":79,"user":{"displayName":"Jay Barode","userId":"13781167781472862626"}}},"execution_count":161,"outputs":[]},{"cell_type":"code","source":["data.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"GoignpcEtDPV","executionInfo":{"status":"ok","timestamp":1676114007973,"user_tz":-330,"elapsed":78,"user":{"displayName":"Jay Barode","userId":"13781167781472862626"}},"outputId":"9889396d-d122-49da-e519-b051cfafc926"},"execution_count":162,"outputs":[{"output_type":"execute_result","data":{"text/plain":["        input      output\n","0 -122.740667 -130.572085\n","1 -121.531419 -129.938929\n","2 -134.917019 -130.141832\n","3 -120.605951 -125.760932\n","4 -129.894781 -112.785214"],"text/html":["\n","  <div id=\"df-54c87d29-673e-4dd7-ac75-7ed17ab3c2bf\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>input</th>\n","      <th>output</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>-122.740667</td>\n","      <td>-130.572085</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>-121.531419</td>\n","      <td>-129.938929</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>-134.917019</td>\n","      <td>-130.141832</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>-120.605951</td>\n","      <td>-125.760932</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>-129.894781</td>\n","      <td>-112.785214</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-54c87d29-673e-4dd7-ac75-7ed17ab3c2bf')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-54c87d29-673e-4dd7-ac75-7ed17ab3c2bf button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-54c87d29-673e-4dd7-ac75-7ed17ab3c2bf');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":162}]},{"cell_type":"code","source":["data.tail()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"QnxvP_l1tE31","executionInfo":{"status":"ok","timestamp":1676114007974,"user_tz":-330,"elapsed":74,"user":{"displayName":"Jay Barode","userId":"13781167781472862626"}},"outputId":"ca930344-384c-4450-f8cc-98fcddf8f289"},"execution_count":163,"outputs":[{"output_type":"execute_result","data":{"text/plain":["          input      output\n","1692  25.410184  -76.380902\n","1693  29.537304  -82.796934\n","1694  31.633331  -87.000000\n","1695  29.091458 -104.943052\n","1696  17.145296 -101.726894"],"text/html":["\n","  <div id=\"df-2697ae31-4850-4eb4-9595-81fb5d47077f\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>input</th>\n","      <th>output</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1692</th>\n","      <td>25.410184</td>\n","      <td>-76.380902</td>\n","    </tr>\n","    <tr>\n","      <th>1693</th>\n","      <td>29.537304</td>\n","      <td>-82.796934</td>\n","    </tr>\n","    <tr>\n","      <th>1694</th>\n","      <td>31.633331</td>\n","      <td>-87.000000</td>\n","    </tr>\n","    <tr>\n","      <th>1695</th>\n","      <td>29.091458</td>\n","      <td>-104.943052</td>\n","    </tr>\n","    <tr>\n","      <th>1696</th>\n","      <td>17.145296</td>\n","      <td>-101.726894</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2697ae31-4850-4eb4-9595-81fb5d47077f')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-2697ae31-4850-4eb4-9595-81fb5d47077f button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-2697ae31-4850-4eb4-9595-81fb5d47077f');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":163}]},{"cell_type":"code","source":["data.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CMLAGlY0tH0F","executionInfo":{"status":"ok","timestamp":1676114007977,"user_tz":-330,"elapsed":72,"user":{"displayName":"Jay Barode","userId":"13781167781472862626"}},"outputId":"5dade361-0ec7-4dbd-c6d1-37fba33495b8"},"execution_count":164,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(1697, 2)"]},"metadata":{},"execution_count":164}]},{"cell_type":"code","source":["#Statical measures of dataframe\n","data.describe()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"wKoT3r14tKPV","executionInfo":{"status":"ok","timestamp":1676114007978,"user_tz":-330,"elapsed":61,"user":{"displayName":"Jay Barode","userId":"13781167781472862626"}},"outputId":"83ee9cd0-c89b-4399-f50e-ffc1e5ece0ba"},"execution_count":165,"outputs":[{"output_type":"execute_result","data":{"text/plain":["             input       output\n","count  1696.000000  1696.000000\n","mean      1.159933   -34.088017\n","std      79.005970    65.771112\n","min    -134.962839  -132.422167\n","25%     -63.386506   -80.026767\n","50%      10.195194   -50.470981\n","75%      70.264109   -11.000000\n","max     134.605775   134.425495"],"text/html":["\n","  <div id=\"df-fd877ce6-aebc-4519-bb47-ada71deb8423\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>input</th>\n","      <th>output</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>1696.000000</td>\n","      <td>1696.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>1.159933</td>\n","      <td>-34.088017</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>79.005970</td>\n","      <td>65.771112</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>-134.962839</td>\n","      <td>-132.422167</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>-63.386506</td>\n","      <td>-80.026767</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>10.195194</td>\n","      <td>-50.470981</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>70.264109</td>\n","      <td>-11.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>134.605775</td>\n","      <td>134.425495</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fd877ce6-aebc-4519-bb47-ada71deb8423')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-fd877ce6-aebc-4519-bb47-ada71deb8423 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-fd877ce6-aebc-4519-bb47-ada71deb8423');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":165}]},{"cell_type":"code","source":["#Plotting the data on a scatter plot\n","plt.figure(figsize = (10,6))\n","plt.scatter(data.input,data.output,color = 'r')\n","plt.xlabel('Input')\n","plt.ylabel('Output')\n","plt.title('Represtion of dataset')\n","plt.grid()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":404},"id":"nhYfgdHgtTf8","executionInfo":{"status":"ok","timestamp":1676114007980,"user_tz":-330,"elapsed":57,"user":{"displayName":"Jay Barode","userId":"13781167781472862626"}},"outputId":"e318e9de-9639-48ce-8f79-142bacfb30a1"},"execution_count":166,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 720x432 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["X = data.drop(columns = 'output',axis = 1)\n","Y = data['output']\n","Y.dropna()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Dng4zL9SuFy2","executionInfo":{"status":"ok","timestamp":1676114007982,"user_tz":-330,"elapsed":55,"user":{"displayName":"Jay Barode","userId":"13781167781472862626"}},"outputId":"a4dc61e9-c9ad-4f97-9a3a-3933d01ace1f"},"execution_count":167,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0      -130.572085\n","1      -129.938929\n","2      -130.141832\n","3      -125.760932\n","4      -112.785214\n","           ...    \n","1692    -76.380902\n","1693    -82.796934\n","1694    -87.000000\n","1695   -104.943052\n","1696   -101.726894\n","Name: output, Length: 1696, dtype: float64"]},"metadata":{},"execution_count":167}]},{"cell_type":"code","source":["scaler = StandardScaler()\n","scaler.fit(X)\n","standardized_data = scaler.transform(X)"],"metadata":{"id":"uivDN1Rn6w_-","executionInfo":{"status":"ok","timestamp":1676114007983,"user_tz":-330,"elapsed":51,"user":{"displayName":"Jay Barode","userId":"13781167781472862626"}}},"execution_count":168,"outputs":[]},{"cell_type":"code","source":["print(standardized_data)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"79JkrWiy7DZU","executionInfo":{"status":"ok","timestamp":1676114007984,"user_tz":-330,"elapsed":51,"user":{"displayName":"Jay Barode","userId":"13781167781472862626"}},"outputId":"782e0e29-e813-4c19-88b1-22381a489071"},"execution_count":169,"outputs":[{"output_type":"stream","name":"stdout","text":["[[-1.56870605]\n"," [-1.55339576]\n"," [-1.72287089]\n"," ...\n"," [ 0.38582384]\n"," [ 0.35364116]\n"," [ 0.20239076]]\n"]}]},{"cell_type":"code","source":["X = standardized_data\n","Y = data['output']"],"metadata":{"id":"1NiS55o57JRN","executionInfo":{"status":"ok","timestamp":1676114008414,"user_tz":-330,"elapsed":474,"user":{"displayName":"Jay Barode","userId":"13781167781472862626"}}},"execution_count":170,"outputs":[]},{"cell_type":"code","source":["#Splitting the data into training and test data\n","X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.2, random_state=2)"],"metadata":{"id":"RE_emO5uvMX7","executionInfo":{"status":"ok","timestamp":1676114008415,"user_tz":-330,"elapsed":20,"user":{"displayName":"Jay Barode","userId":"13781167781472862626"}}},"execution_count":171,"outputs":[]},{"cell_type":"code","source":["print(X.shape,X_train.shape,X_test.shape)\n","#X_train.astype(np.float128)\n","#Y_train.astype(np.float128)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xzi0uEX0vkEH","executionInfo":{"status":"ok","timestamp":1676114008416,"user_tz":-330,"elapsed":20,"user":{"displayName":"Jay Barode","userId":"13781167781472862626"}},"outputId":"533387cc-6efd-4db5-ce4f-5d1e0668d96e"},"execution_count":172,"outputs":[{"output_type":"stream","name":"stdout","text":["(1697, 1) (1357, 1) (340, 1)\n"]}]},{"cell_type":"code","source":["#Training the model\n","model = LinearRegression()\n","model.fit(X_train,Y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":345},"id":"MIs9G9I-vquV","executionInfo":{"status":"error","timestamp":1676114008416,"user_tz":-330,"elapsed":19,"user":{"displayName":"Jay Barode","userId":"13781167781472862626"}},"outputId":"3a071bd4-e14c-4003-8601-d8f3ecb2cd6e"},"execution_count":173,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-173-adcdd4af89b4>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m#Training the model\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mLinearRegression\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mY_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/sklearn/linear_model/_base.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[1;32m    660\u001b[0m         \u001b[0maccept_sparse\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpositive\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m\"csr\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"csc\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"coo\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    661\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 662\u001b[0;31m         X, y = self._validate_data(\n\u001b[0m\u001b[1;32m    663\u001b[0m             \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maccept_sparse\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maccept_sparse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_numeric\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmulti_output\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    664\u001b[0m         )\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/sklearn/base.py\u001b[0m in \u001b[0;36m_validate_data\u001b[0;34m(self, X, y, reset, validate_separately, **check_params)\u001b[0m\n\u001b[1;32m    579\u001b[0m                 \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mcheck_y_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    580\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 581\u001b[0;31m                 \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_X_y\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mcheck_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    582\u001b[0m             \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    583\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_X_y\u001b[0;34m(X, y, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, multi_output, ensure_min_samples, ensure_min_features, y_numeric, estimator)\u001b[0m\n\u001b[1;32m    962\u001b[0m         \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"y cannot be None\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    963\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 964\u001b[0;31m     X = check_array(\n\u001b[0m\u001b[1;32m    965\u001b[0m         \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    966\u001b[0m         \u001b[0maccept_sparse\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maccept_sparse\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_array\u001b[0;34m(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, estimator)\u001b[0m\n\u001b[1;32m    798\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    799\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mforce_all_finite\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 800\u001b[0;31m             \u001b[0m_assert_all_finite\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mallow_nan\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mforce_all_finite\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"allow-nan\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    801\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    802\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mensure_min_samples\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36m_assert_all_finite\u001b[0;34m(X, allow_nan, msg_dtype)\u001b[0m\n\u001b[1;32m    112\u001b[0m         ):\n\u001b[1;32m    113\u001b[0m             \u001b[0mtype_err\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"infinity\"\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mallow_nan\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0;34m\"NaN, infinity\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 114\u001b[0;31m             raise ValueError(\n\u001b[0m\u001b[1;32m    115\u001b[0m                 msg_err.format(\n\u001b[1;32m    116\u001b[0m                     \u001b[0mtype_err\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmsg_dtype\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mmsg_dtype\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: Input contains NaN, infinity or a value too large for dtype('float64')."]}]},{"cell_type":"markdown","source":["Model evaluation \n","\n","Accuracy Score"],"metadata":{"id":"U2odoHUGLv7g"}},{"cell_type":"code","source":["#Accuracy score on the training data\n","X_train_prediction = classifier.predict(X_train)\n","training_data_accuracy = accuracy_score(Y_train,X_train_prediction)"],"metadata":{"id":"BaRur_GR6dbj","executionInfo":{"status":"aborted","timestamp":1676114008418,"user_tz":-330,"elapsed":19,"user":{"displayName":"Jay Barode","userId":"13781167781472862626"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print('Accuracy score of the test data:',test_data_accuracy)\n"],"metadata":{"id":"ydemfR7FL8wm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Accuracy score on the test data\n","X_test_prediction = classifier.predict(X_test)\n","test_data_accuracy = accuracy_score(Y_test,X_test_prediction)"],"metadata":{"id":"u-sma3F9L8ze"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print('Accuracy score of the test data:',test_data_accuracy)\n"],"metadata":{"id":"9RP1JUB7L85N"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"k0AZGTieL88P"},"execution_count":null,"outputs":[]}]}